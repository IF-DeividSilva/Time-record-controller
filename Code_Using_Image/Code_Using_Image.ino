#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <FS.h> // Para SPIFFS (ou LittleFS se você configurou seu core para isso)

// --- Configurações de Wi-Fi ---
const char* ssid = "NG_Uaifai";      
const char* password = "GD556522"; 

// --- Configurações do Servidor Python Local ---
String localServerIP = "192.168.0.103"; // !!! COLOQUE O IP REAL DO SEU PC ONDE O PYTHON RODA !!!
int localServerPort = 5000;             // Porta que o servidor Flask está usando
String serverPath = "/upload_qr_bytes"; // Endpoint no Python para upload

const unsigned char nugSXt_jpg_data[] PROGMEM = {
0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 
0x00, 0x00, 0x01, 0x2C, 0x00, 0x00, 0x01, 0x2C, 0x08, 0x06, 0x00, 0x00, 0x00, 0x79, 0x7D, 0x8E, 
0x75, 0x00, 0x00, 0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC, 0x61, 
0x05, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00, 0x7A, 0x26, 0x00, 0x00, 0x80, 
0x84, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x80, 0xE8, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0xEA, 
0x60, 0x00, 0x00, 0x3A, 0x98, 0x00, 0x00, 0x17, 0x70, 0x9C, 0xBA, 0x51, 0x3C, 0x00, 0x00, 0x00, 
0x06, 0x62, 0x4B, 0x47, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0x43, 0xBB, 0x7F, 0x00, 
0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 
0xF0, 0x6B, 0x42, 0xCF, 0x00, 0x00, 0x05, 0x80, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0xED, 0xDD, 
0x31, 0x8E, 0x1A, 0x4B, 0x18, 0x46, 0x51, 0xB0, 0xBC, 0x0B, 0x04, 0xFB, 0x5F, 0x17, 0x01, 0xDB, 
0xE8, 0x17, 0x11, 0x39, 0x99, 0xD2, 0x53, 0xA9, 0xFF, 0xDB, 0x73, 0x4E, 0x6C, 0x59, 0x05, 0x83, 
0xAE, 0x2A, 0xF9, 0x54, 0xF7, 0xE3, 0x38, 0x8E, 0x1B, 0x40, 0xC0, 0x9F, 0xB3, 0x0F, 0x00, 0xF0, 
0x53, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 
0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 
0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 
0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 
0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 
0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 
0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x7F, 0xCF, 0x3E, 0xC0, 0xD7, 0xE3, 0xF1, 
0xB8, 0x7D, 0x3E, 0x9F, 0xB3, 0x8F, 0x91, 0x72, 0x1C, 0xC7, 0x8F, 0xFF, 0xED, 0xFD, 0x7E, 0xDF, 
0xF2, 0xFF, 0xEE, 0xB2, 0xEB, 0xBC, 0x7E, 0x67, 0xEB, 0x26, 0xFC, 0x1E, 0xBE, 0xDC, 0xB0, 0x80, 
0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 
0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0xC6, 0x4C, 
0x73, 0x56, 0xBC, 0xDF, 0xEF, 0xDB, 0xF3, 0xF9, 0x3C, 0xFB, 0x18, 0x5B, 0xEC, 0x9A, 0x8E, 0xEC, 
0x9A, 0x57, 0xD4, 0x26, 0x3F, 0x2B, 0xFC, 0xCE, 0xE6, 0x71, 0xC3, 0x02, 0x32, 0x04, 0x0B, 0xC8, 
0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 
0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x48, 0x4E, 0x73, 0x56, 0xAC, 0x4C, 
0x47, 0x76, 0xA9, 0x4D, 0x52, 0x76, 0x7D, 0xB6, 0x09, 0x7F, 0x8B, 0x5D, 0x26, 0x7C, 0xB6, 0x2B, 
0xFF, 0xCE, 0xBE, 0xDC, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 
0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 
0x0C, 0xC1, 0x02, 0x32, 0x2E, 0x3F, 0xCD, 0x61, 0xAF, 0x5D, 0xAF, 0xE6, 0x4C, 0x98, 0xBA, 0x30, 
0x8F, 0x1B, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 
0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 
0x40, 0x86, 0x69, 0x0E, 0xFF, 0x30, 0xB7, 0x61, 0x2A, 0x37, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 
0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 
0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x8C, 0xCB, 0x4F, 0x73, 0x56, 0xA6, 0x23, 
0xAC, 0xDB, 0x35, 0xE3, 0xA9, 0xB9, 0xF2, 0x67, 0x9B, 0xC4, 0x0D, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 
0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 
0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x23, 0x39, 0xCD, 0x79, 0xBD, 0x5E, 
0x67, 0x1F, 0x21, 0xA7, 0xF6, 0x12, 0xCE, 0x84, 0xC9, 0x8F, 0xDF, 0xD9, 0x3C, 0x6E, 0x58, 0x40, 
0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 
0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0xF7, 0xC3, 
0x73, 0x1F, 0xBF, 0xC2, 0x84, 0xA9, 0x0B, 0xFC, 0x5F, 0x6E, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 
0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 
0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x63, 0x5E, 0xCD, 0xD9, 0xF5, 0xFA, 
0xCA, 0x84, 0x17, 0x60, 0x76, 0x9D, 0x61, 0xE5, 0xFF, 0xDD, 0x35, 0xB7, 0x99, 0xF0, 0x9D, 0xED, 
0x3A, 0xEF, 0x95, 0x27, 0x4A, 0xD5, 0xEF, 0xC1, 0x0D, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 
0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 
0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x63, 0xCC, 0x34, 0x67, 0xC5, 0xA4, 0xA9, 0xC0, 
0x4F, 0xEC, 0x9A, 0x41, 0xEC, 0x9A, 0xC5, 0x4C, 0x30, 0xE1, 0xB3, 0xF9, 0xBB, 0xCD, 0xE3, 0x86, 
0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 
0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x91, 
0x9C, 0xE6, 0x5C, 0xF9, 0xA5, 0x96, 0x09, 0xAF, 0x99, 0x5C, 0x79, 0x92, 0x32, 0xE1, 0x3B, 0xAB, 
0x7D, 0xB6, 0x49, 0xDC, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 
0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 
0x0C, 0xC1, 0x02, 0x32, 0xC6, 0x4C, 0x73, 0x6A, 0xB3, 0x82, 0x09, 0xF3, 0x20, 0x33, 0x9E, 0xBD, 
0x9F, 0x6D, 0x45, 0x6D, 0xA2, 0x54, 0xE5, 0x86, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 
0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 
0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x71, 0x3F, 0x26, 0xEC, 0x1A, 0x6E, 0xBD, 0xA9, 0xCB, 
0x95, 0xCF, 0xB0, 0xCB, 0x84, 0x49, 0xCA, 0x95, 0x27, 0x4A, 0xBB, 0x4C, 0xF8, 0xED, 0x7C, 0xB9, 
0x61, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 
0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 
0x8C, 0x99, 0xE6, 0xB0, 0xD7, 0x84, 0xE9, 0xC8, 0x95, 0xFF, 0xDF, 0x15, 0x13, 0xE6, 0x36, 0x2B, 
0x26, 0x25, 0xC2, 0x0D, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 
0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 
0x10, 0x2C, 0x20, 0xE3, 0xEF, 0xD9, 0x07, 0xF8, 0x7A, 0x3C, 0x1E, 0xB7, 0xCF, 0xE7, 0x73, 0xF6, 
0x31, 0x52, 0x56, 0x26, 0x13, 0x13, 0x5E, 0x6A, 0x99, 0x30, 0xB7, 0xD9, 0xE5, 0xCA, 0xAF, 0x1D, 
0x4D, 0xE2, 0x86, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 
0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 
0x16, 0x90, 0x31, 0x66, 0x9A, 0xB3, 0xE2, 0xFD, 0x7E, 0xDF, 0x9E, 0xCF, 0xE7, 0xD9, 0xC7, 0xD8, 
0x62, 0xC2, 0x44, 0xA9, 0xF6, 0x0A, 0xCD, 0x84, 0xD7, 0x6D, 0x76, 0x7D, 0x67, 0x13, 0xBE, 0xDF, 
0x49, 0xDC, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 
0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 
0x02, 0x32, 0x92, 0xD3, 0x9C, 0x15, 0x13, 0x5E, 0x54, 0x99, 0x30, 0x99, 0xB8, 0xF2, 0xC4, 0xA3, 
0xF6, 0x62, 0x4D, 0xED, 0x45, 0xA0, 0x49, 0xDC, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 
0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 
0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x2E, 0x3F, 0xCD, 0x61, 0xDD, 0x84, 0xD7, 0x62, 
0x76, 0x99, 0x70, 0xDE, 0xDA, 0x2B, 0x3F, 0x93, 0xB8, 0x61, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 
0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 
0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x98, 0xE6, 0xFC, 0x12, 0xBB, 0x26, 0x29, 
0x13, 0xE6, 0x36, 0x13, 0xEC, 0xFA, 0x7E, 0x27, 0xFC, 0xDD, 0x26, 0xCD, 0x78, 0xDC, 0xB0, 0x80, 
0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 
0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x2E, 0x3F, 
0xCD, 0x99, 0x34, 0x2B, 0x38, 0xD3, 0x84, 0x39, 0xC8, 0x84, 0x17, 0x6B, 0x9C, 0xB7, 0xCD, 0x0D, 
0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 
0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x23, 
0x39, 0xCD, 0x79, 0xBD, 0x5E, 0x67, 0x1F, 0x81, 0x41, 0x6A, 0x93, 0x94, 0x09, 0x93, 0x9F, 0x2A, 
0x37, 0x2C, 0x20, 0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 
0x43, 0xB0, 0x80, 0x0C, 0xC1, 0x02, 0x32, 0x04, 0x0B, 0xC8, 0x10, 0x2C, 0x20, 0x43, 0xB0, 0x80, 
0x8C, 0xFB, 0x51, 0xDB, 0x35, 0x00, 0xBF, 0x96, 0x1B, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 
0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 
0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 
0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 
0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 
0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 
0x82, 0x05, 0x64, 0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0x86, 0x60, 0x01, 0x19, 0x82, 0x05, 0x64, 
0x08, 0x16, 0x90, 0x21, 0x58, 0x40, 0xC6, 0x7F, 0x0A, 0x35, 0x19, 0x87, 0xEB, 0x51, 0x3B, 0x1F, 
0x00, 0x00, 0x00, 0x25, 0x74, 0x45, 0x58, 0x74, 0x64, 0x61, 0x74, 0x65, 0x3A, 0x63, 0x72, 0x65, 
0x61, 0x74, 0x65, 0x00, 0x32, 0x30, 0x32, 0x35, 0x2D, 0x30, 0x36, 0x2D, 0x30, 0x35, 0x54, 0x31, 
0x34, 0x3A, 0x34, 0x37, 0x3A, 0x34, 0x35, 0x2B, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x79, 0x51, 0x85, 
0x71, 0x00, 0x00, 0x00, 0x25, 0x74, 0x45, 0x58, 0x74, 0x64, 0x61, 0x74, 0x65, 0x3A, 0x6D, 0x6F, 
0x64, 0x69, 0x66, 0x79, 0x00, 0x32, 0x30, 0x32, 0x35, 0x2D, 0x30, 0x36, 0x2D, 0x30, 0x35, 0x54, 
0x31, 0x34, 0x3A, 0x34, 0x37, 0x3A, 0x34, 0x35, 0x2B, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x08, 0x0C, 
0x3D, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82

}; // Não se esqueça do ponto e vírgula final!

// Esta linha CALCULA AUTOMATICAMENTE o tamanho do array.
const unsigned int nugSXt_jpg_len = sizeof(nugSXt_jpg_data);
// ----------------------------------------------------------------------------------

unsigned long previousMillis = 0;
const long interval = 45000; // Intervalo para enviar a imagem (45 segundos)

void setup() {
  Serial.begin(115200);
  delay(1000); 
  Serial.println("\n\nIniciando ESP8266 - Envio de Imagem QR (Array de Bytes Embutido)...");
  Serial.print("Tamanho dos dados da imagem (PROGMEM) a serem enviados: ");
  Serial.println(nugSXt_jpg_len);

  if (nugSXt_jpg_len == 0) {
      Serial.println("ERRO CRÍTICO: O array de bytes da imagem está vazio ou não foi preenchido!");
      Serial.println("Por favor, converta sua imagem nugSXt.jpg para um array de bytes C e cole no código.");
      while(1) delay(1); // Trava se não houver dados da imagem
  }

  Serial.println("Conectando ao Wi-Fi...");
  WiFi.mode(WIFI_STA); // Garante que o ESP está em modo Station
  WiFi.begin(ssid, password);
  
  int retries = 0;
  while (WiFi.status() != WL_CONNECTED && retries < 30) { 
    delay(500); 
    Serial.print("."); 
    retries++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWi-Fi conectado!");
    Serial.print("IP do ESP8266: "); Serial.println(WiFi.localIP());
    Serial.print("Servidor Python esperado em: http://"); Serial.print(localServerIP); 
    Serial.print(":"); Serial.println(localServerPort);
    Serial.print("Caminho no servidor: "); Serial.println(serverPath);
    Serial.println("Enviando a imagem (array de bytes) em breve...");
  } else {
    Serial.println("\nFalha ao conectar ao Wi-Fi. Verifique credenciais/sinal.");
    Serial.println("O ESP tentará reconectar no próximo ciclo do loop se a condição de envio for atingida.");
  }
}

void loop() {
  unsigned long currentMillis = millis();
  if (WiFi.status() == WL_CONNECTED && currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    sendImageDataToServer(nugSXt_jpg_data, nugSXt_jpg_len);
  }
  // Pequeno delay para estabilidade
  delay(100); 
}

void sendImageDataToServer(const unsigned char* imageData, unsigned int imageLength) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("ERRO: Sem conexão Wi-Fi para enviar os dados da imagem.");
    return;
  }
  if (imageLength == 0) {
    Serial.println("ERRO: Dados da imagem (comprimento) estão zerados. Nada a enviar.");
    return;
  }

  Serial.println("------------------------------------------------------");
  Serial.print("Tentando enviar array de bytes da imagem para o servidor Python (Tamanho: "); 
  Serial.print(imageLength); Serial.println(" bytes)");

  HTTPClient http;
  WiFiClient client; 

  String url = "http://" + localServerIP + ":" + String(localServerPort) + serverPath;
  Serial.print("URL da requisição local: "); Serial.println(url);

  if (!http.begin(client, url)) {
    Serial.println("ERRO: http.begin() falhou!");
    return;
  }
  
  // Define o Content-Type correto para a sua imagem (JPEG neste caso)
  http.addHeader("Content-Type", "image/jpeg");
  
  // Envia a requisição POST com o array de bytes como corpo
  // A biblioteca ESP8266HTTPClient pode precisar que os dados de PROGMEM sejam lidos para a RAM primeiro
  // se o envio direto do ponteiro PROGMEM não funcionar para http.POST().
  // Vamos tentar direto. Se falhar, precisaremos copiar para um buffer na RAM.
  int httpCode = http.POST((uint8_t*)imageData, imageLength); 
  
  if (httpCode > 0) {
    Serial.printf("[HTTP Local POST] Código de resposta: %d\n", httpCode);
    String payload = http.getString();
    Serial.println("[HTTP Local POST] Resposta do servidor: " + payload);
  } else {
    // Se httpCode < 0, é um erro da biblioteca HTTPClient antes de enviar ou de conexão
    Serial.printf("[HTTP Local POST] Falha na requisição POST. Erro da lib: %s (Código: %d)\n", http.errorToString(httpCode).c_str(), httpCode);
  }
  
  http.end();   
  Serial.println("------------------------------------------------------");
}